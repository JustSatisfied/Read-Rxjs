name: Build, Test and Deploy - yepengfei/demo

on:
  push:
    branches: [ "yepengfei/demo" ]
  pull_request:
    branches: [ "yepengfei/demo" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    timeout-minutes: 20
    
    env:
      NODE_ENV: production
      GIT_HTTP_MAX_BUFFER: 524288000
      DEPLOY_DIR: ${{ runner.os == 'Windows' && 'C:\\yepengfei-demo' || '/var/www/yepengfei-demo' }}

    steps:
    # ========== 网络问题修复部分 ==========
    - name: Configure Git
      shell: bash
      run: |
        git config --global http.sslVerify false
        git config --global http.postBuffer 1048576000
        git config --global http.version HTTP/1.1

    - name: Attempt Checkout (Primary)
      uses: actions/checkout@v4
      with:
        ref: yepengfei/demo
        fetch-depth: 1
        retries: 3
        retry-wait-seconds: 10
      continue-on-error: true

    - name: Fallback Manual Clone
      if: steps.checkout.outcome == 'failure'
      shell: bash
      run: |
        echo "使用备用克隆方案..."
        rm -rf *
        git init -q
        git remote add origin https://github.com/JustSatisfied/Read-Rxjs.git
        git fetch --depth=1 origin ${{ github.ref }}
        git checkout -f FETCH_HEAD
        git reset --hard

    # ========== 构建测试部分 ==========
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    # ========== 本地部署部分 ==========
    - name: Prepare deployment directory
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
          sudo mkdir -p $DEPLOY_DIR
          sudo chown -R $USER:$USER $DEPLOY_DIR
        else
          mkdir -p $DEPLOY_DIR
        fi

    - name: Deploy to local server
      shell: bash
      run: |
        echo "正在部署到 $DEPLOY_DIR"
        if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
          cp -rv ./dist/* $DEPLOY_DIR/
        else
          xcopy /E /I /Y ".\dist" "$DEPLOY_DIR\\"
        fi

    - name: Verify deployment
      shell: bash
      run: |
        echo "部署内容验证:"
        if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
          ls -la $DEPLOY_DIR
        else
          dir "$DEPLOY_DIR"
        fi